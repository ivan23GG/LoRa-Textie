  struct RxStruct {
    char textB[60];  
    int cycle;                                                            
};
RxStruct rxData;
bool newData = false;
const byte startMarker = 18;
const byte stopMarker = 20;
const byte rxDataLen = sizeof(rxData);
void setup() {
    Serial.begin(9600);
    Serial.println("\nStarting SerialStructReceive.ino\n");
    Serial1.begin(9600);
    pinMode(7, OUTPUT);
}
void loop() {
    recvStructWithKnownLength();
    if (newData == true) {
        showNewData();
        newData = false;
    }
}

void showNewData() {
    Serial.print("This just in    ");
    Serial.println(rxData.textB);
    Serial.println(rxData.cycle);
    
}


void recvStructWithKnownLength() {
    static byte recvData[rxDataLen];
    byte rb;
    byte * structStart;
    structStart = reinterpret_cast <byte *> (&rxData);
    if (Serial1.available() >= rxDataLen + 1 and newData == false) {
      
        rb = Serial1.read();
        if (rb == startMarker) {
          if(rb!=stopMarker)
          {
            for (byte n = 0; n < rxDataLen; n++) {
                *(structStart + n) = Serial1.read();
            }  
            while (Serial1.available() > 0) {
                byte dumpTheData = Serial1.read();
            }
            newData = true;
          }
        }
    }
}
