#include <SPI.h>
#include <SD.h>
struct RxStruct {
    char textB[16];        
    int valC;               
    unsigned long valD;                                                      
};
RxStruct rxData;
bool newData = false;
const byte startMarker = 255;
const byte rxDataLen = sizeof(rxData);
File history;
void setup() {
    Serial.begin(9600);
    Serial.println("\nStarting SerialStructReceive.ino\n");
    Serial.print("Initializing SD card...");
  if (!SD.begin(53)) {
    Serial.println("initialization failed!");
    while (1);
  }
  Serial.println("initialization done.");
    Serial1.begin(9600);
    pinMode(7, OUTPUT);
}
void loop() {
    recvStructWithKnownLength();
    if (newData == true) {
        showNewData();
        newData = false;
    }
}

void showNewData() {
   
    Serial.print("This just in    ");
    Serial.print(rxData.textB);
    Serial.print(' ');
    Serial.print(rxData.valC);
    Serial.print(' ');
    Serial.println(rxData.valD);
    history = SD.open("messages.txt", FILE_WRITE);
    if (history) {
    Serial.print("Writing to test.txt...");
    history.print("Time: ");
    history.print(rxData.valD);
    history.print(" Value: ");
    history.print(rxData.valC);
    history.print(" Message: ");
    history.println(rxData.textB);
    history.println(" ");
    history.close();
    Serial.println("done.");
  }
  else {
    // if the file didn't open, print an error:
    Serial.println("error opening messages.txt");
  }
  File myFile = SD.open("messages.txt");
  if (myFile) {
    Serial.println("test.txt:");
    while (myFile.available()) {
      Serial.write(myFile.read());
    }
    myFile.close();
  } else {
    // if the file didn't open, print an error:
    Serial.println("error opening messages.txt");
  }
}
void recvStructWithKnownLength() {
    static byte recvData[rxDataLen];
    byte rb;
    byte * structStart;
    structStart = reinterpret_cast <byte *> (&rxData);
    if (Serial1.available() >= rxDataLen + 1 and newData == false) {
        rb = Serial1.read();
        if (rb == startMarker) {    
            for (byte n = 0; n < rxDataLen; n++) {
                *(structStart + n) = Serial1.read();
            }  
            while (Serial1.available() > 0) {
                byte dumpTheData = Serial1.read();
            }
            newData = true;
        }
    }
}
